<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Grader.Api</name>
    </assembly>
    <members>
        <member name="M:Grader.Api.Controllers.CategoryController.SearchAsync(Grader.Api.Business.Queries.CategorySearch.Query)">
            <summary>
            Searches a list of categories
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.CategoryController.GetAsync(System.Int64)">
            <summary>
            Get a category
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.CategoryController.CreateAsync(Grader.Api.Business.Commands.CategoryCreate.Command)">
            <summary>
            Create a new category
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.CategoryController.UpdateAsync(System.Int64,Grader.Api.Business.Commands.CategoryUpdate.Command)">
            <summary>
            Update a category
            </summary>
            <param name="id"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.CategoryController.DeleteAsync(System.Int64)">
            <summary>
            Delete a category
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.CourseController.SearchByCategoryAsync(System.Int64,Grader.Api.Business.Queries.CourseSearch.Query)">
            <summary>
            Searches a list of courses for a category
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.CourseController.SearchAsync(Grader.Api.Business.Queries.CourseSearch.Query)">
            <summary>
            Searches a list of courses
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.CourseController.GetAsync(System.Int64)">
            <summary>
            Get a course
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.CourseController.CreateAsync(System.Int64,Grader.Api.Business.Commands.CourseCreate.Command)">
            <summary>
            Create a new course
            </summary>
            <param name="request"></param>
            <param name="categoryId"></param>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.CourseController.UpdateAsync(System.Int64,System.Int64,Grader.Api.Business.Commands.CourseUpdate.Command)">
            <summary>
            Update a course
            </summary>
            <param name="id"></param>
            <param name="categoryId"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.CourseController.DeleteAsync(System.Int64)">
            <summary>
            Delete a course
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.LessonController.SearchByCourseAsync(System.Int64,Grader.Api.Business.Queries.LessonSearch.Query)">
            <summary>
            Searches a list of lesons for a course
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.LessonController.SearchAsync(Grader.Api.Business.Queries.LessonSearch.Query)">
            <summary>
            Searches a list of Lessons
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.LessonController.GetAsync(System.Int64)">
            <summary>
            Get a Lesson
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.LessonController.CreateAsync(System.Int64,Grader.Api.Business.Commands.LessonCreate.Command)">
            <summary>
            Create a new Lesson
            </summary>
            <param name="request"></param>
            <param name="courseId"></param>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.LessonController.UpdateAsync(System.Int64,System.Int64,Grader.Api.Business.Commands.LessonUpdate.Command)">
            <summary>
            Update a Lesson
            </summary>
            <param name="id"></param>
            <param name="courseId"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.LessonController.DeleteAsync(System.Int64)">
            <summary>
            Delete a Lesson
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Controllers.MediaController.GetAsync(System.String)">
            <summary>
            Get a category
            </summary>
            <returns></returns>
        </member>
        <member name="T:Grader.Api.Infrastructure.RequireValueTypePropertiesSchemaFilter">
            <summary>
            Makes all value-type properties "Required" in the schema docs, which is appropriate since they cannot be null.
            </summary>
            <remarks>
            This saves effort + maintenance from having to add <c>[Required]</c> to all value type properties; Web API, EF, and Json.net already understand
            that value type properties cannot be null.
            
            More background on the problem solved by this type: https://stackoverflow.com/questions/46576234/swashbuckle-make-non-nullable-properties-required </remarks>
        </member>
        <member name="M:Grader.Api.Infrastructure.RequireValueTypePropertiesSchemaFilter.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Grader.Api.Infrastructure.RequireValueTypePropertiesSchemaFilter"/>.
            </summary>
            <param name="camelCasePropertyNames">If <c>true</c>, property names are expected to be camel-cased in the JSON schema.</param>
            <remarks>
            I couldn't figure out a way to determine if the swagger generator is using <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> or not;
            so <paramref name="camelCasePropertyNames"/> needs to be passed in since it can't be determined.
            </remarks>
        </member>
        <member name="M:Grader.Api.Infrastructure.RequireValueTypePropertiesSchemaFilter.PropertyName(System.Reflection.PropertyInfo)">
            <summary>
            Returns the JSON property name for <paramref name="property"/>.
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Grader.Api.Infrastructure.RequireValueTypePropertiesSchemaFilter.Apply(Microsoft.OpenApi.Models.OpenApiSchema,Swashbuckle.AspNetCore.SwaggerGen.SchemaFilterContext)">
            <summary>
            Adds non-nullable value type properties in a <see cref="T:System.Type"/> to the set of required properties for that type.
            </summary>
            <param name="schema"></param>
            <param name="context"></param>
        </member>
    </members>
</doc>
